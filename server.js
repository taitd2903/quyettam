const express = require("express");
const http = require("http");
const { Server } = require("socket.io");
const fs = require("fs");
const path = require("path");
const cors = require("cors");

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: { origin: "*", methods: ["GET", "POST"] },
});

app.use(cors());
// Route ƒë·ªÉ l·∫•y d·ªØ li·ªáu ƒëi·ªÉm t·ª´ file scores.json
app.get("/api/scores", (req, res) => {
  res.json(scores); // Tr·∫£ v·ªÅ to√†n b·ªô d·ªØ li·ªáu t·ª´ file scores.json
});

const filePath = path.join(__dirname, "scores.json");

// ƒê·ªçc d·ªØ li·ªáu t·ª´ file scores.json
const readScoresFromFile = () => {
  if (!fs.existsSync(filePath)) {
    fs.writeFileSync(filePath, "[]", "utf8"); // N·∫øu file kh√¥ng t·ªìn t·∫°i, t·∫°o file m·ªõi v·ªõi d·ªØ li·ªáu l√† m·∫£ng tr·ªëng
    return [];
  }
  try {
    const data = JSON.parse(fs.readFileSync(filePath, "utf8"));
    // Ki·ªÉm tra n·∫øu d·ªØ li·ªáu kh√¥ng ph·∫£i l√† m·∫£ng th√¨ tr·∫£ v·ªÅ m·∫£ng tr·ªëng
    if (!Array.isArray(data)) {
      console.error("D·ªØ li·ªáu trong file kh√¥ng ph·∫£i l√† m·∫£ng. T·∫°o l·∫°i file tr·ªëng.");
      return [];
    }
    return data;
  } catch (err) {
    console.error("Error parsing JSON from file:", err);
    fs.writeFileSync(filePath, "[]", "utf8"); // N·∫øu l·ªói parse JSON, t·∫°o l·∫°i file tr·ªëng
    return [];
  }
};

// Ghi d·ªØ li·ªáu v√†o file scores.json
const writeScoresToFile = (scores) => {
  fs.writeFileSync(filePath, JSON.stringify(scores, null, 2), "utf8");
};

let scores = readScoresFromFile();

// C√†i ƒë·∫∑t s·ª± ki·ªán k·∫øt n·ªëi t·ª´ client
io.on("connection", (socket) => {
  console.log("A user connected");

  // L·∫Øng nghe s·ª± ki·ªán g·ª≠i d·ªØ li·ªáu ng∆∞·ªùi d√πng v√† l∆∞u v√†o file scores.json
  socket.on("saveUserData", (userData) => {
    scores.push(userData);
    writeScoresToFile(scores);

    // T√≠nh t·ªïng ƒëi·ªÉm cho user
    const totalScore = Object.values(userData.scores).reduce(
      (acc, val) => acc + (typeof val === "number" ? val : 0),
      0
    );

    console.log("User data saved:", userData);
    console.log("Total score:", totalScore);

    // G·ª≠i l·∫°i th√¥ng b√°o v√† ƒëi·ªÉm s·ªë cho client
    socket.emit("userDataSaved", {
      message: "D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!",
      totalScore: totalScore, // Tr·∫£ v·ªÅ t·ªïng ƒëi·ªÉm
    });
  });

  // X·ª≠ l√Ω s·ª± ki·ªán ng·∫Øt k·∫øt n·ªëi c·ªßa ng∆∞·ªùi d√πng
  socket.on("disconnect", () => {
    console.log("A user disconnected");
  });
});

// C·∫•u h√¨nh route m·∫∑c ƒë·ªãnh
app.get("/", (req, res) => {
  res.send("üßÆ Scoring Server is Running!");
});

const PORT = process.env.PORT || 4000;
server.listen(PORT, () => {
  console.log(`üßÆ Scoring Server ch·∫°y t·∫°i http://localhost:${PORT}`);
});
app.post("/api/reset-scores", (req, res) => {
  scores = [];  // X√≥a s·∫°ch danh s√°ch ng∆∞·ªùi d√πng
  writeScoresToFile(scores);  // Ghi file r·ªóng []

  res.json({ message: "ƒê√£ x√≥a to√†n b·ªô danh s√°ch ng∆∞·ªùi d√πng v√† ƒëi·ªÉm!" });
});
